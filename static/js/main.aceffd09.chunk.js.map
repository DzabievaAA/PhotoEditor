{"version":3,"sources":["img/kisspng-x-mark-check-mark-clip-art-wrong-sign-5b12e998675839.8614187915279661044233 (1).png","Slider/Slider.module.css","img/logo.svg","Slider/Slider.jsx","Sliders_RGB/Sliders_RGB.jsx","Sliders_opacity/Sliders_opacity.jsx","WorkSpace/WorkSpace.jsx","Navig/Navigation.jsx","App.js","serviceWorker.js","index.js","WorkSpace/WorkSpace.module.css","Sliders_RGB/Sliders_RGB.module.css"],"names":["module","exports","Slider","onRangeChange","Max","inputRef","useRef","paragraphRef","useEffect","input","current","paragraph","addEventListener","innerHTML","value","className","style","slider_wrapper","ref","type","min","max","step","list","tickmarks","id","Sliders_RGB","onRangeRed","onRangeGreen","onRangeBlue","setMode","Container","styles","wrapperSliders","Row","RGB_names","onClick","src","imgsxrv","height","width","alt","Sliders_opacity","originalData","origRedChanel","origGreenChanel","origBlueChanel","origAlfaChanel","currentChanelRed","currentChanelGreen","currentChanelBlue","currentChanelAlfa","imageWidth","imageHeight","onRangeOpacity","WorkSpace","slidersRBG","slidersCntrst","mode","canvasRef","renderImage","cnvs","ctx","getContext","collectedImageData","Uint8ClampedArray","i","length","imgData","ImageData","data","set","createImageBitmap","then","bitmap","drawImage","chanelChange","e","inputChanel","outputChanel","undefined","sliders","Tab","Col","leftTestNavbar","sm","Nav","variant","Item","Link","inputButton","eventKey","click","inputTypeFile","onChange","canvas","file","files","reader","FileReader","onloadend","imgNew","Image","onload","naturalWidth","naturalHeight","ratioX","ratioY","ratio","Math","getImageData","initChanel","result","readAsDataURL","wrapperOnCanvas","slidersOpenBlock","Content","Pane","download","document","getElementById","image","toDataURL","replace","setAttribute","currentGaussRed","currentGaussGreen","currentGaussBlue","applyKernel","row","column","twoDtoOneD","currentIndex","Navigation","Navbar","collapseOnSelect","expand","bg","Brand","href","logo","Toggle","aria-controls","Collapse","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aceffd09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kisspng-x-mark-check-mark-clip-art-wrong-sign-5b12e998675839.8614187915279661044233 (1).6022c2d6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider_wrapper\":\"Slider_slider_wrapper__1rt3u\",\"tickmarks\":\"Slider_tickmarks__3MzbN\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d51050a0.svg\";","import React, {useEffect, useRef} from 'react';\r\nimport style from './Slider.module.css';\r\n\r\nfunction Slider ( { onRangeChange,Max} ) {\r\n\r\n  const max = 2;\r\n  const inputRef = useRef(null);\r\n  const paragraphRef = useRef(null);\r\n  useEffect(()=>{\r\n    let input = inputRef.current;\r\n    let paragraph = paragraphRef.current;\r\n    input.addEventListener(\"input\", function() {\r\n      paragraph.innerHTML =  input.value * max / 100;\r\n      onRangeChange(input.value * max / 100);\r\n  }, false); \r\n  })\r\n    return <div className={style.slider_wrapper}>\r\n  <input ref={inputRef} type=\"range\" min=\"0\" max={Max} step=\"1\" list=\"tickmarks\"></input>\r\n  <datalist className={style.tickmarks} id=\"tickmarks\">\r\n  <option value=\"0\" ></option>\r\n  <option value=\"1\" ></option>\r\n  <option value=\"2\" ></option>\r\n  </datalist>\r\n  <p ref={paragraphRef}></p>\r\n</div>\r\n}\r\nexport default Slider;","import React, {useEffect} from 'react';\r\nimport Slider from \"../Slider/Slider\";\r\nimport styles from '../Sliders_RGB/Sliders_RGB.module.css'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport imgsxrv from '../img/kisspng-x-mark-check-mark-clip-art-wrong-sign-5b12e998675839.8614187915279661044233 (1).png'\r\n\r\nfunction Sliders_RGB ({onRangeRed, onRangeGreen, onRangeBlue,setMode }) {\r\n  // useEffect(() => {\r\n  //   if (isLoggedIn) {\r\n  //     return <Sliders />;\r\n  //   }\r\n  //   return null;\r\n  // });\r\n    return <Container className={styles.wrapperSliders}>\r\n      <Row>\r\n        <p className={styles.RGB_names}>\r\n          Red\r\n        </p>\r\n          <Slider onRangeChange={onRangeRed}/>\r\n      </Row>\r\n      <Row>\r\n      <p className={styles.RGB_names}>\r\n          Green\r\n        </p>\r\n          <Slider onRangeChange={onRangeGreen}/>\r\n      </Row>\r\n      <Row>\r\n      <p className={styles.RGB_names}>\r\n          Blue\r\n        </p>\r\n          <Slider onRangeChange={onRangeBlue}/>\r\n      </Row>\r\n\r\n\r\n        <img onClick={()=>{setMode(\"NONE\")}} src={imgsxrv} height=\"40px\" width=\"40px\" alt=\"\"/>\r\n\r\n\r\n    </Container>\r\n//       <div className={styles.wrapperSliders}>\r\n//         <div>\r\n//           <Slider_saturation onRangeChange={onRangeRed}/>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <Slider_saturation onRangeChange={onRangeGreen}/>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <Slider_saturation onRangeChange={onRangeBlue}/>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <img onClick={()=>{setMode(\"NONE\")}} src={imgsxrv} height=\"40px\" width=\"40px\" alt=\"\"/>\r\n//         </div>\r\n//       </div>\r\n\r\n      \r\n//   </div>\r\n }\r\n\r\nexport default Sliders_RGB;","import React, {useEffect} from 'react';\r\nimport Slider from \"../Slider/Slider\";\r\nimport styles from \"../Sliders_RGB/Sliders_RGB.module.css\"\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport imgsxrv from '../img/kisspng-x-mark-check-mark-clip-art-wrong-sign-5b12e998675839.8614187915279661044233 (1).png'\r\n\r\nfunction Sliders_opacity({setMode, onRangeOpacity}) {\r\n    return <Container className={styles.wrapperSliders}>\r\n        <Row>\r\n        <p className={styles.RGB_names}>\r\n          Opacity\r\n        </p>\r\n            <Slider onRangeChange={onRangeOpacity} />\r\n        </Row>\r\n\r\n        <img onClick={()=>{setMode(\"NONE\")}} src={imgsxrv} height=\"40px\" width=\"40px\" alt=\"\"/>\r\n \r\n    </Container>\r\n}\r\n\r\nexport default Sliders_opacity;","import React, {useRef, useState}  from 'react';\r\nimport styles from '../WorkSpace/WorkSpace.module.css'\r\nimport Sliders_RGB from '../Sliders_RGB/Sliders_RGB';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport { Container, Nav, Tab, Row, Col } from 'react-bootstrap';\r\nimport Sliders_opacity from '../Sliders_opacity/Sliders_opacity';\r\n  let originalData;\r\n  let origRedChanel;\r\n  let origGreenChanel;\r\n  let origBlueChanel;\r\n  let origAlfaChanel;\r\n  let currentChanelRed;\r\n  let currentChanelGreen;\r\n  let currentChanelBlue;\r\n  let currentChanelAlfa;\r\n  let imageWidth;\r\n  let imageHeight;\r\nfunction WorkSpace ({mode, setMode} ) {\r\n  const inputRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  \r\n//разбиваем канвас на каналы\r\n  function initChanel() {\r\n    let cnvs = canvasRef.current;\r\n    origRedChanel = new Uint8ClampedArray(imageWidth * imageHeight);\r\n    origGreenChanel = new Uint8ClampedArray(imageWidth * imageHeight);\r\n    origBlueChanel = new Uint8ClampedArray(imageWidth * imageHeight);\r\n    origAlfaChanel = new Uint8ClampedArray(imageWidth * imageHeight);\r\n    for (var i = 0; i < originalData.length; i += 4) {\r\n      origRedChanel[i / 4] = originalData[i];\r\n      origGreenChanel[i / 4] = originalData[i+1];\r\n      origBlueChanel[i / 4] = originalData[i+2];\r\n      origAlfaChanel[i / 4] = originalData[i+3];\r\n    }\r\n    currentChanelRed =[...origRedChanel];\r\n    currentChanelGreen = [...origGreenChanel];\r\n    currentChanelBlue = [...origBlueChanel];\r\n    currentChanelAlfa = [...origAlfaChanel];\r\n  };\r\n  function Gauss () {\r\n    if (currentChanelRed !== undefined && \r\n      currentChanelGreen!== undefined &&\r\n      currentChanelBlue !== undefined) {\r\n    let currentGaussRed = [...currentChanelRed];\r\n    let currentGaussGreen = [...currentChanelGreen];\r\n    let currentGaussBlue = [...currentChanelBlue];\r\n      \r\n   function applyKernel (row, column, inputChanel, outputChanel) {\r\n\r\n     function twoDtoOneD (row, column, width) {\r\n      return row * width + column;\r\n     }\r\n\r\n     let currentIndex = twoDtoOneD( row, column, imageWidth );\r\n\r\n     outputChanel[ currentIndex ] = 0;\r\n     //todo : apply DRY\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row, column - 1, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row, column, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row, column + 1, imageWidth)];\r\n\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row -1 , column - 1, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row - 1, column, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row - 1, column + 1, imageWidth)];\r\n\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row + 1 , column - 1, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row + 1, column, imageWidth)];\r\n     outputChanel[ currentIndex ] += inputChanel[twoDtoOneD( row + 1, column + 1, imageWidth)];\r\n\r\n     outputChanel[ currentIndex ] /= 9;\r\n   }\r\n\r\n   for (let column = 1; column  < imageWidth - 1 ; column++ ) {\r\n     for (let row = 1; row < imageHeight - 1; row++){\r\n        applyKernel(row, column, currentChanelRed, currentGaussRed);\r\n        applyKernel(row,column, currentChanelGreen, currentGaussGreen);\r\n        applyKernel(row,column,currentChanelBlue, currentGaussBlue);\r\n      }\r\n   }\r\n\r\n    currentChanelRed = currentGaussRed;\r\n    currentChanelGreen = currentGaussGreen;\r\n    currentChanelBlue = currentGaussBlue;\r\n\r\n    renderImage();\r\n  }\r\n}\r\n  \r\n\r\n  function renderImage() {\r\n    let cnvs = canvasRef.current;\r\n    let ctx = cnvs.getContext('2d');\r\n    let collectedImageData = new Uint8ClampedArray((imageWidth * imageHeight)*4);\r\n    for (let i = 0; i < currentChanelRed.length; i++) {\r\n      collectedImageData[i *4 ] = currentChanelRed[i];\r\n      collectedImageData[i*4 + 1] = currentChanelGreen[i];\r\n      collectedImageData[i*4 + 2] = currentChanelBlue[i];\r\n      collectedImageData[i*4 + 3] = currentChanelAlfa[i]; \r\n    }\r\n    let imgData = new ImageData( imageWidth, imageHeight);\r\n    imgData.data.set(collectedImageData);\r\n\r\n    createImageBitmap( imgData ).then( (bitmap) => {\r\n      ctx.drawImage( bitmap, 0, 0, imageWidth, imageHeight, 0,0, cnvs.width,cnvs.height);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //Вывод на canvas img после загрузки в input\r\n  function previewFile() {\r\n    let canvas = canvasRef.current;\r\n    let input = inputRef.current;\r\n    if( input !== null ){\r\n      let file = input.files[0];\r\n      let reader  = new FileReader();\r\n      reader.onloadend = () => {\r\n        let imgNew = new Image();\r\n        let ctx = canvas.getContext(\"2d\");\r\n        imgNew.onload = () => {\r\n          canvas.width = imgNew.naturalWidth;\r\n          canvas.height = imgNew.naturalHeight;\r\n          var ratioX = canvas.width / imgNew.naturalWidth;\r\n          var ratioY = canvas.height / imgNew.naturalHeight;\r\n          var ratio = Math.min(ratioX, ratioY);\r\n          ctx.drawImage(imgNew, 0, 0, imgNew.naturalWidth * ratio, imgNew.naturalHeight * ratio);\r\n          imageWidth = imgNew.width;\r\n          imageHeight = imgNew.height;\r\n          originalData = new Uint8ClampedArray(ctx.getImageData(0, 0, imageWidth, imageHeight).data);\r\n          initChanel();\r\n          renderImage();\r\n        }\r\n        imgNew.src = reader.result;\r\n      }\r\n      if (file !== undefined) {\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  }\r\n  \r\n// Функция для RGB изменений\r\nfunction chanelChange (e,inputChanel, outputChanel) {\r\n  if (currentChanelRed !== undefined && \r\n      currentChanelGreen !== undefined &&\r\n      currentChanelBlue !== undefined) {\r\n      for (var i = 0; i < inputChanel.length; i++) {\r\n        outputChanel[i] = inputChanel[i]  * e;\r\n      }\r\n      renderImage()\r\n    } \r\n  } \r\n  //Загрузка изображения на компьютер\r\n    function download(){\r\n      let cnvs = canvasRef.current\r\n      var download = document.getElementById(\"download\");\r\n      var image = cnvs.toDataURL(\"image/png\")\r\n                  .replace(\"image/png\", \"image/octet-stream\");\r\n      download.setAttribute(\"href\", image);\r\n }\r\n  //отрисовка слайдеров и закрытие на \"крестик\"\r\n  let slidersRBG, slidersCntrst;\r\n  if(mode == \"RGB\") {\r\n    slidersRBG =  <Sliders_RGB  className={styles.sliders}  \r\n  onRangeRed={(e)=>{chanelChange(e, origRedChanel, currentChanelRed)}}\r\n  onRangeGreen={(e)=>{chanelChange(e, origGreenChanel, currentChanelGreen)}} \r\n  onRangeBlue={(e)=>{chanelChange(e, origBlueChanel, currentChanelBlue)}} \r\n  setMode={setMode} />;\r\n} else if (mode == \"OPCTY\") {\r\n  debugger\r\n    slidersCntrst = <Sliders_opacity onRangeOpacity={(e)=>{chanelChange(e, origAlfaChanel, currentChanelAlfa)}} setMode={setMode}/>\r\n  }\r\n  else if (mode == \"NONE\") {\r\n    slidersRBG = null;\r\n  }\r\n\r\n\r\n  return (<div>\r\n      <Container>\r\n      <Tab.Container id=\"ledt-tabs-example\">\r\n        <Row>\r\n          <Col className={styles.leftTestNavbar} sm={2}>\r\n            <Nav variant=\"pills\" className=\"flex-column mt-2\">\r\n              <Nav.Item>\r\n                <Nav.Link className={styles.inputButton}  eventKey=\"first\" onClick={()=>{setMode(\"RGB\")}}> <span>Colors Range</span> </Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link className={styles.inputButton} eventKey=\"second\" onClick={()=>{setMode(\"OPCTY\")}}> <span>Opacity</span> </Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Col>\r\n          <Col sm={6} className=\"justify-content-center\">\r\n            <button className={styles.inputButton} onClick={(e)=>{\r\n              let input = inputRef.current;\r\n              input.click ()\r\n            }}><span className=\"link-content\">Load file</span></button>\r\n          <input className={styles.inputTypeFile} type=\"file\" ref={inputRef}  onChange={previewFile}></input>\r\n          <div className={styles.wrapperOnCanvas} className=\"justify-content-center\">\r\n          <canvas className={styles.canvas} ref={canvasRef} width=\"500\" height=\"500\" ></canvas>\r\n          </div>\r\n          </Col>\r\n          <Col sm={2} className={styles.slidersOpenBlock} className=\"justify-content-center\">\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"first\">\r\n                {slidersRBG}\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"second\">\r\n                {slidersCntrst}\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n          <Col className={styles.leftTestNavbar} sm={2}>\r\n            <div>\r\n              <a id=\"download\" download=\"image.png\">\r\n                <button className={styles.inputButton} variant=\"dark\" type=\"button\" onClick={download}>\r\n                <span className=\"link-content\">Download</span>\r\n                </button>\r\n              </a>\r\n                <button className={styles.inputButton} variant=\"dark\" type=\"button\" onClick={Gauss}>\r\n                <span className=\"link-content\">Gausse</span>\r\n                </button>\r\n          </div>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container> \r\n    </Container>\r\n    </div>\r\n        /* <div class=\"container-fluid align-items-center\" >\r\n          <div className={styles.wrapperWorkSpase}>\r\n        <div className={styles.wrapperInput}>\r\n          <input type=\"file\" ref={inputRef}  onChange={previewFile}></input>\r\n        </div> \r\n        \r\n         <br/>\r\n\r\n         <div className={styles.wrapperCanvas}>\r\n           {slider}\r\n           <canvas className={styles.canvas}  ref={canvasRef}  ></canvas>\r\n        </div>*/\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n  \r\n\r\n\r\nexport default WorkSpace;","import React from 'react';\r\nimport {Navbar, Nav, Container} from 'react-bootstrap';\r\nimport logo from '../img/logo.svg'\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Switch from 'react-bootstrap/esm/Switch';\r\nimport {Route } from \"react-router-dom\"\r\nimport Sliders_RGB from '../Sliders_RGB/Sliders_RGB';\r\n\r\nfunction Navigation ({setMode}) {\r\n    return (<div>\r\n            <Navbar collapseOnSelect expand=\"md\" bg='dark' variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/\">\r\n                        <img\r\n                        src = {logo}\r\n                        height=\"50\"\r\n                        width=\"50\"\r\n                        className=\"d-inline-block align-top\"/>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id='responsive-navbar-nav'>\r\n                        <Nav className=\"mr-auto\">\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n            \r\n            </div>\r\n        )\r\n    \r\n};\r\n\r\nexport default Navigation;","import React from 'react';\nimport './App.css';\nimport WorkSpace from './WorkSpace/WorkSpace.jsx';\nimport Navigation from './Navig/Navigation.jsx'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n//ColorChange\nfunction App() {\n  const [ mode, setMode] = React.useState(\"NONE\");\n\n  return ( \n  <div className=\"App\">\n      <Navigation setMode={setMode}/>\n      <WorkSpace setMode={setMode} mode={mode} />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container-fluid\":\"WorkSpace_container-fluid__3Bht7\",\"inputTypeFile\":\"WorkSpace_inputTypeFile__GubTz\",\"inputButton\":\"WorkSpace_inputButton__3wIj_\",\"leftTestNavbar\":\"WorkSpace_leftTestNavbar__3VnAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperSliders\":\"Sliders_RGB_wrapperSliders__3jTXS\",\"RGB_names\":\"Sliders_RGB_RGB_names__2mwG-\"};"],"sourceRoot":""}